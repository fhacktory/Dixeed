//~autogen autogen-header
// Sections of the following code were auto-generated based on spec v0.9.3-pre, rev 2.
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
//~autogen
var IO = require('./io');
var Device = IO.Device;
//~autogen generic-class-description classes.powerSupply>currentClass
/**
 * A generic interface to read data from the system's power_supply class.
 * Uses the built-in legoev3-battery if none is specified.
 */
//~autogen
var PowerSupply = (function (_super) {
    __extends(PowerSupply, _super);
    function PowerSupply(deviceName) {
        _super.call(this);
        var deviceConstraints = {};
        if (deviceName == undefined)
            deviceConstraints["scope"] = "System";
        else
            this.deviceName = deviceName;
        this.connect('power_supply', deviceName, deviceConstraints);
    }
    Object.defineProperty(PowerSupply.prototype, "measuredCurrent", {
        //PROPERTIES
        //~autogen generic-get-set classes.powerSupply>currentClass
        /**
         * The measured current that the battery is supplying (in microamps)
         */
        get: function () {
            return this.readNumber("current_now");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PowerSupply.prototype, "measuredVoltage", {
        /**
         * The measured voltage that the battery is supplying (in microvolts)
         */
        get: function () {
            return this.readNumber("voltage_now");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PowerSupply.prototype, "maxVoltage", {
        /**
         */
        get: function () {
            return this.readNumber("voltage_max_design");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PowerSupply.prototype, "minVoltage", {
        /**
         */
        get: function () {
            return this.readNumber("voltage_min_design");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PowerSupply.prototype, "technology", {
        /**
         */
        get: function () {
            return this.readString("technology");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PowerSupply.prototype, "type", {
        /**
         */
        get: function () {
            return this.readString("type");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PowerSupply.prototype, "voltageVolts", {
        //~autogen
        get: function () {
            return this.measuredVoltage / 1000000;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PowerSupply.prototype, "currentAmps", {
        get: function () {
            return this.measuredCurrent / 1000000;
        },
        enumerable: true,
        configurable: true
    });
    return PowerSupply;
})(Device);
exports.PowerSupply = PowerSupply;
//~autogen generic-class-description classes.led>currentClass
/**
 * Any device controlled by the generic LED driver.
 * See https://www.kernel.org/doc/Documentation/leds/leds-class.txt
 * for more details.
 */
//~autogen
var LED = (function (_super) {
    __extends(LED, _super);
    function LED(deviceName) {
        _super.call(this);
        this.deviceName = deviceName;
        this.connect('leds', deviceName);
    }
    Object.defineProperty(LED.prototype, "maxBrightness", {
        //PROPERTIES
        //~autogen generic-get-set classes.led>currentClass
        /**
         * Returns the maximum allowable brightness value.
         */
        get: function () {
            return this.readNumber("max_brightness");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LED.prototype, "brightness", {
        /**
         * Sets the brightness level. Possible values are from 0 to `max_brightness`.
         */
        get: function () {
            return this.readNumber("brightness");
        },
        /**
         * Sets the brightness level. Possible values are from 0 to `max_brightness`.
         */
        set: function (value) {
            this.setNumber("brightness", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LED.prototype, "triggers", {
        /**
         * Returns a list of available triggers.
         */
        get: function () {
            return this.readStringArray("trigger");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LED.prototype, "trigger", {
        /**
         * Sets the led trigger. A trigger
         * is a kernel based source of led events. Triggers can either be simple or
         * complex. A simple trigger isn't configurable and is designed to slot into
         * existing subsystems with minimal additional code. Examples are the `ide-disk` and
         * `nand-disk` triggers.
         *
         * Complex triggers whilst available to all LEDs have LED specific
         * parameters and work on a per LED basis. The `timer` trigger is an example.
         * The `timer` trigger will periodically change the LED brightness between
         * 0 and the current brightness setting. The `on` and `off` time can
         * be specified via `delay_{on,off}` attributes in milliseconds.
         * You can change the brightness value of a LED independently of the timer
         * trigger. However, if you set the brightness value to 0 it will
         * also disable the `timer` trigger.
         */
        get: function () {
            return this.readStringSelector("trigger");
        },
        /**
         * Sets the led trigger. A trigger
         * is a kernel based source of led events. Triggers can either be simple or
         * complex. A simple trigger isn't configurable and is designed to slot into
         * existing subsystems with minimal additional code. Examples are the `ide-disk` and
         * `nand-disk` triggers.
         *
         * Complex triggers whilst available to all LEDs have LED specific
         * parameters and work on a per LED basis. The `timer` trigger is an example.
         * The `timer` trigger will periodically change the LED brightness between
         * 0 and the current brightness setting. The `on` and `off` time can
         * be specified via `delay_{on,off}` attributes in milliseconds.
         * You can change the brightness value of a LED independently of the timer
         * trigger. However, if you set the brightness value to 0 it will
         * also disable the `timer` trigger.
         */
        set: function (value) {
            this.setString("trigger", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LED.prototype, "delayOn", {
        /**
         * The `timer` trigger will periodically change the LED brightness between
         * 0 and the current brightness setting. The `on` time can
         * be specified via `delay_on` attribute in milliseconds.
         */
        get: function () {
            return this.readNumber("delay_on");
        },
        /**
         * The `timer` trigger will periodically change the LED brightness between
         * 0 and the current brightness setting. The `on` time can
         * be specified via `delay_on` attribute in milliseconds.
         */
        set: function (value) {
            this.setNumber("delay_on", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LED.prototype, "delayOff", {
        /**
         * The `timer` trigger will periodically change the LED brightness between
         * 0 and the current brightness setting. The `off` time can
         * be specified via `delay_off` attribute in milliseconds.
         */
        get: function () {
            return this.readNumber("delay_off");
        },
        /**
         * The `timer` trigger will periodically change the LED brightness between
         * 0 and the current brightness setting. The `off` time can
         * be specified via `delay_off` attribute in milliseconds.
         */
        set: function (value) {
            this.setNumber("delay_off", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LED.prototype, "brightnessPct", {
        //~autogen
        /**
         * Sets the LED's brightness to the given percent (0-1) of the max value.
         */
        get: function () {
            return this.brightness / this.maxBrightness;
        },
        set: function (brightnessPct) {
            this.brightness = Math.round(this.maxBrightness * brightnessPct);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets brightness to maximum value, turning the LED on
     */
    LED.prototype.on = function () {
        this.brightness = this.maxBrightness;
    };
    /**
     * Sets brightness to 0, turning the LED off
     */
    LED.prototype.off = function () {
        this.brightness = 0;
    };
    /**
     * Flashes the LED on a timer using the given intervals.
     */
    LED.prototype.flash = function (onInterval, offInterval) {
        this.delayOn = onInterval;
        this.delayOff = offInterval;
        this.trigger = "timer";
    };
    return LED;
})(Device);
exports.LED = LED;
var LEDGroup = (function () {
    function LEDGroup() {
        var leds = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            leds[_i - 0] = arguments[_i];
        }
        this.leds = [];
        for (var _a = 0; _a < leds.length; _a++) {
            var ledObj = leds[_a];
            if (typeof ledObj == "string") {
                var newLed = new LED(ledObj);
                this.leds.push(newLed);
            }
            else {
                this.leds.push(ledObj);
            }
        }
    }
    Object.defineProperty(LEDGroup.prototype, "isConnected", {
        get: function () {
            return this.leds.every(function (led, index, wholeArray) {
                return led.connected;
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets the brightness percentages for each LED in the group to the given percentages,
     * scaling each according to the given percent power scale if provided.
     *
     * @param colorCombination The percent powers to use for each LED, applied to the corresponding index in the LED group.
     * @param pctPower The scale factor to multiply each value by. Leave undefined or null to default to `1`.
     */
    LEDGroup.prototype.setColor = function (colorCombination, pctPower) {
        if (colorCombination.length !== this.leds.length) {
            throw new Error("The given color values had either too few or too many numbers for this LED group."
                + " Expected length: " + this.leds.length + "; Given length: " + colorCombination.length);
        }
        if (pctPower == undefined || pctPower == null) {
            pctPower = 1;
        }
        for (var ledIndex = 0; ledIndex < this.leds.length; ledIndex++) {
            this.leds[ledIndex].brightnessPct = pctPower * colorCombination[ledIndex];
        }
    };
    /**
     * Sets the given property names to the corresponding values on each LED in the group.
     *
     * If the requested property does not exist on the LED object, the property is skipped.
     *
     * @param props A hash containing the key-value pairs of properties to set.
     */
    LEDGroup.prototype.setProps = function (props) {
        for (var _i = 0, _a = this.leds; _i < _a.length; _i++) {
            var led = _a[_i];
            for (var prop in Object.keys(props)) {
                if (Object.keys(led).indexOf(prop) != -1) {
                    led[prop] = props[prop];
                }
            }
        }
    };
    LEDGroup.prototype.allOn = function () {
        for (var _i = 0, _a = this.leds; _i < _a.length; _i++) {
            var led = _a[_i];
            led.on();
        }
    };
    LEDGroup.prototype.allOff = function () {
        for (var _i = 0, _a = this.leds; _i < _a.length; _i++) {
            var led = _a[_i];
            led.off();
        }
    };
    return LEDGroup;
})();
exports.LEDGroup = LEDGroup;
//~autogen generic-class-description classes.legoPort>currentClass
/**
 * The `lego-port` class provides an interface for working with input and
 * output ports that are compatible with LEGO MINDSTORMS RCX/NXT/EV3, LEGO
 * WeDo and LEGO Power Functions sensors and motors. Supported devices include
 * the LEGO MINDSTORMS EV3 Intelligent Brick, the LEGO WeDo USB hub and
 * various sensor multiplexers from 3rd party manufacturers.
 *
 * Some types of ports may have multiple modes of operation. For example, the
 * input ports on the EV3 brick can communicate with sensors using UART, I2C
 * or analog validate signals - but not all at the same time. Therefore there
 * are multiple modes available to connect to the different types of sensors.
 *
 * In most cases, ports are able to automatically detect what type of sensor
 * or motor is connected. In some cases though, this must be manually specified
 * using the `mode` and `set_device` attributes. The `mode` attribute affects
 * how the port communicates with the connected device. For example the input
 * ports on the EV3 brick can communicate using UART, I2C or analog voltages,
 * but not all at the same time, so the mode must be set to the one that is
 * appropriate for the connected sensor. The `set_device` attribute is used to
 * specify the exact type of sensor that is connected. Note: the mode must be
 * correctly set before setting the sensor type.
 *
 * Ports can be found at `/sys/class/lego-port/port<N>` where `<N>` is
 * incremented each time a new port is registered. Note: The number is not
 * related to the actual port at all - use the `address` attribute to find
 * a specific port.
 */
//~autogen
var LegoPort = (function (_super) {
    __extends(LegoPort, _super);
    function LegoPort(port) {
        _super.call(this);
        this._deviceIndex = -1;
        this.connect('lego-port', 'port(\d*)', {
            port_name: port
        });
    }
    Object.defineProperty(LegoPort.prototype, "deviceIndex", {
        get: function () {
            return this._deviceIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LegoPort.prototype, "driverName", {
        //PROPERTIES
        //~autogen generic-get-set classes.legoPort>currentClass
        /**
         * Returns the name of the driver that loaded this device. You can find the
         * complete list of drivers in the [list of port drivers].
         */
        get: function () {
            return this.readString("driver_name");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LegoPort.prototype, "modes", {
        /**
         * Returns a list of the available modes of the port.
         */
        get: function () {
            return this.readStringArray("modes");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LegoPort.prototype, "mode", {
        /**
         * Reading returns the currently selected mode. Writing sets the mode.
         * Generally speaking when the mode changes any sensor or motor devices
         * associated with the port will be removed new ones loaded, however this
         * this will depend on the individual driver implementing this class.
         */
        get: function () {
            return this.readString("mode");
        },
        /**
         * Reading returns the currently selected mode. Writing sets the mode.
         * Generally speaking when the mode changes any sensor or motor devices
         * associated with the port will be removed new ones loaded, however this
         * this will depend on the individual driver implementing this class.
         */
        set: function (value) {
            this.setString("mode", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LegoPort.prototype, "address", {
        /**
         * Returns the name of the port. See individual driver documentation for
         * the name that will be returned.
         */
        get: function () {
            return this.readString("address");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LegoPort.prototype, "setDevice", {
        /**
         * For modes that support it, writing the name of a driver will cause a new
         * device to be registered for that driver and attached to this port. For
         * example, since NXT/Analog sensors cannot be auto-detected, you must use
         * this attribute to load the correct driver. Returns -EOPNOTSUPP if setting a
         * device is not supported.
         */
        set: function (value) {
            this.setString("set_device", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LegoPort.prototype, "status", {
        /**
         * In most cases, reading status will return the same value as `mode`. In
         * cases where there is an `auto` mode additional values may be returned,
         * such as `no-device` or `error`. See individual port driver documentation
         * for the full list of possible values.
         */
        get: function () {
            return this.readString("status");
        },
        enumerable: true,
        configurable: true
    });
    return LegoPort;
})(Device);
exports.LegoPort = LegoPort;
//# sourceMappingURL=extras.js.map