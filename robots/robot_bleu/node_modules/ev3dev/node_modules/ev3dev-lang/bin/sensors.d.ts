import IO = require('./io');
import Device = IO.Device;
export declare class SensorBase extends Device {
    protected _deviceIndex: number;
    deviceIndex: number;
    constructor(driverTypeDirName: string, nameConvention: string, targetAddress?: string, targetDriverName?: string | string[]);
}
/**
 * The sensor class provides a uniform interface for using most of the
 * sensors available for the EV3. The various underlying device drivers will
 * create a `lego-sensor` device for interacting with the sensors.
 *
 * Sensors are primarily controlled by setting the `mode` and monitored by
 * reading the `value<N>` attributes. Values can be converted to floating point
 * if needed by `value<N>` / 10.0 ^ `decimals`.
 *
 * Since the name of the `sensor<N>` device node does not correspond to the port
 * that a sensor is plugged in to, you must look at the `address` attribute if
 * you need to know which port a sensor is plugged in to. However, if you don't
 * have more than one sensor of each type, you can just look for a matching
 * `driver_name`. Then it will not matter which port a sensor is plugged in to - your
 * program will still work.
 */
export declare class Sensor extends SensorBase {
    constructor(port?: string, driverNames?: string[] | string);
    getValue(valueIndex: number): number;
    getFloatValue(valueIndex: number): number;
    /**
     * Sends a command to the sensor.
     */
    command: string;
    /**
     * Returns a list of the valid commands for the sensor.
     * Returns -EOPNOTSUPP if no commands are supported.
     */
    commands: string[];
    /**
     * Returns the number of decimal places for the values in the `value<N>`
     * attributes of the current mode.
     */
    decimals: number;
    /**
     * Returns the name of the sensor device/driver. See the list of [supported
     * sensors] for a complete list of drivers.
     */
    driverName: string;
    /**
     * Returns the current mode. Writing one of the values returned by `modes`
     * sets the sensor to that mode.
     */
    /**
     * Returns the current mode. Writing one of the values returned by `modes`
     * sets the sensor to that mode.
     */
    mode: string;
    /**
     * Returns a list of the valid modes for the sensor.
     */
    modes: string[];
    /**
     * Returns the number of `value<N>` attributes that will return a valid value
     * for the current mode.
     */
    numValues: number;
    /**
     * Returns the name of the port that the sensor is connected to, e.g. `ev3:in1`.
     * I2C sensors also include the I2C address (decimal), e.g. `ev3:in1:i2c8`.
     */
    address: string;
    /**
     * Returns the units of the measured value for the current mode. May return
     * empty string
     */
    units: string;
}
/**
 * Touch Sensor
 */
export declare class TouchSensor extends Sensor {
    constructor(port?: string);
    /**
     * A boolean indicating whether the current touch sensor is being
     * pressed.
     */
    isPressed: boolean;
}
/**
 * LEGO EV3 color sensor.
 */
export declare class ColorSensor extends Sensor {
    constructor(port?: string);
    /**
     * Reflected light intensity as a percentage. Light on sensor is red.
     */
    reflectedLightIntensity: number;
    /**
     * Ambient light intensity. Light on sensor is dimly lit blue.
     */
    ambientLightIntensity: number;
    /**
     * Color detected by the sensor, categorized by overall value.
     *   - 0: No color
     *   - 1: Black
     *   - 2: Blue
     *   - 3: Green
     *   - 4: Yellow
     *   - 5: Red
     *   - 6: White
     *   - 7: Brown
     */
    color: number;
    /**
     * Red component of the detected color, in the range 0-1020.
     */
    red: number;
    /**
     * Green component of the detected color, in the range 0-1020.
     */
    green: number;
    /**
     * Blue component of the detected color, in the range 0-1020.
     */
    blue: number;
}
/**
 * LEGO EV3 ultrasonic sensor.
 */
export declare class UltrasonicSensor extends Sensor {
    constructor(port?: string);
    /**
     * Measurement of the distance detected by the sensor,
     * in centimeters.
     */
    distanceCentimeters: number;
    /**
     * Measurement of the distance detected by the sensor,
     * in inches.
     */
    distanceInches: number;
    /**
     * Value indicating whether another ultrasonic sensor could
     * be heard nearby.
     */
    otherSensorPresent: boolean;
}
/**
 * LEGO EV3 gyro sensor.
 */
export declare class GyroSensor extends Sensor {
    constructor(port?: string);
    /**
     * The number of degrees that the sensor has been rotated
     * since it was put into this mode.
     */
    angle: number;
    /**
     * The rate at which the sensor is rotating, in degrees/second.
     */
    rate: number;
}
/**
 * LEGO EV3 infrared sensor.
 */
export declare class InfraredSensor extends Sensor {
    constructor(port?: string);
    /**
     * A measurement of the distance between the sensor and the remote,
     * as a percentage. 100% is approximately 70cm/27in.
     */
    proximity: number;
}
/**
 * LEGO NXT Sound Sensor
 */
export declare class SoundSensor extends Sensor {
    constructor(port?: string);
    /**
     * A measurement of the measured sound pressure level, as a
     * percent. Uses a flat weighting.
     */
    soundPressure: number;
    /**
     * A measurement of the measured sound pressure level, as a
     * percent. Uses A-weighting, which focuses on levels up to 55 dB.
     */
    soundPressureLow: number;
}
/**
 * LEGO NXT Light Sensor
 */
export declare class LightSensor extends Sensor {
    constructor(port?: string);
    /**
     * A measurement of the reflected light intensity, as a percentage.
     */
    reflectedLightIntensity: number;
    /**
     * A measurement of the ambient light intensity, as a percentage.
     */
    ambientLightIntensity: number;
}
/**
 * A generic interface to control I2C-type EV3 sensors.
 */
export declare class I2CSensor extends Sensor {
    constructor(port?: string, driverNames?: string[]);
    /**
     * Returns the firmware version of the sensor if available. Currently only
     * I2C/NXT sensors support this.
     */
    fwVersion: string;
    /**
     * Returns the polling period of the sensor in milliseconds. Writing sets the
     * polling period. Setting to 0 disables polling. Minimum value is hard
     * coded as 50 msec. Returns -EOPNOTSUPP if changing polling is not supported.
     * Currently only I2C/NXT sensors support changing the polling period.
     */
    /**
     * Returns the polling period of the sensor in milliseconds. Writing sets the
     * polling period. Setting to 0 disables polling. Minimum value is hard
     * coded as 50 msec. Returns -EOPNOTSUPP if changing polling is not supported.
     * Currently only I2C/NXT sensors support changing the polling period.
     */
    pollMs: number;
}
