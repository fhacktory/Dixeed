import IO = require('./io');
import Device = IO.Device;
/**
 * A generic interface to read data from the system's power_supply class.
 * Uses the built-in legoev3-battery if none is specified.
 */
export declare class PowerSupply extends Device {
    deviceName: any;
    constructor(deviceName: string);
    /**
     * The measured current that the battery is supplying (in microamps)
     */
    measuredCurrent: number;
    /**
     * The measured voltage that the battery is supplying (in microvolts)
     */
    measuredVoltage: number;
    /**
     */
    maxVoltage: number;
    /**
     */
    minVoltage: number;
    /**
     */
    technology: string;
    /**
     */
    type: string;
    voltageVolts: number;
    currentAmps: number;
}
/**
 * Any device controlled by the generic LED driver.
 * See https://www.kernel.org/doc/Documentation/leds/leds-class.txt
 * for more details.
 */
export declare class LED extends Device {
    deviceName: string;
    constructor(deviceName: string);
    /**
     * Returns the maximum allowable brightness value.
     */
    maxBrightness: number;
    /**
     * Sets the brightness level. Possible values are from 0 to `max_brightness`.
     */
    /**
     * Sets the brightness level. Possible values are from 0 to `max_brightness`.
     */
    brightness: number;
    /**
     * Returns a list of available triggers.
     */
    triggers: string[];
    /**
     * Sets the led trigger. A trigger
     * is a kernel based source of led events. Triggers can either be simple or
     * complex. A simple trigger isn't configurable and is designed to slot into
     * existing subsystems with minimal additional code. Examples are the `ide-disk` and
     * `nand-disk` triggers.
     *
     * Complex triggers whilst available to all LEDs have LED specific
     * parameters and work on a per LED basis. The `timer` trigger is an example.
     * The `timer` trigger will periodically change the LED brightness between
     * 0 and the current brightness setting. The `on` and `off` time can
     * be specified via `delay_{on,off}` attributes in milliseconds.
     * You can change the brightness value of a LED independently of the timer
     * trigger. However, if you set the brightness value to 0 it will
     * also disable the `timer` trigger.
     */
    /**
     * Sets the led trigger. A trigger
     * is a kernel based source of led events. Triggers can either be simple or
     * complex. A simple trigger isn't configurable and is designed to slot into
     * existing subsystems with minimal additional code. Examples are the `ide-disk` and
     * `nand-disk` triggers.
     *
     * Complex triggers whilst available to all LEDs have LED specific
     * parameters and work on a per LED basis. The `timer` trigger is an example.
     * The `timer` trigger will periodically change the LED brightness between
     * 0 and the current brightness setting. The `on` and `off` time can
     * be specified via `delay_{on,off}` attributes in milliseconds.
     * You can change the brightness value of a LED independently of the timer
     * trigger. However, if you set the brightness value to 0 it will
     * also disable the `timer` trigger.
     */
    trigger: string;
    /**
     * The `timer` trigger will periodically change the LED brightness between
     * 0 and the current brightness setting. The `on` time can
     * be specified via `delay_on` attribute in milliseconds.
     */
    /**
     * The `timer` trigger will periodically change the LED brightness between
     * 0 and the current brightness setting. The `on` time can
     * be specified via `delay_on` attribute in milliseconds.
     */
    delayOn: number;
    /**
     * The `timer` trigger will periodically change the LED brightness between
     * 0 and the current brightness setting. The `off` time can
     * be specified via `delay_off` attribute in milliseconds.
     */
    /**
     * The `timer` trigger will periodically change the LED brightness between
     * 0 and the current brightness setting. The `off` time can
     * be specified via `delay_off` attribute in milliseconds.
     */
    delayOff: number;
    /**
     * Sets the LED's brightness to the given percent (0-1) of the max value.
     */
    brightnessPct: number;
    /**
     * Sets brightness to maximum value, turning the LED on
     */
    on(): void;
    /**
     * Sets brightness to 0, turning the LED off
     */
    off(): void;
    /**
     * Flashes the LED on a timer using the given intervals.
     */
    flash(onInterval: number, offInterval: number): void;
}
export declare class LEDGroup {
    private leds;
    constructor(...leds: (string | LED)[]);
    isConnected: boolean;
    /**
     * Sets the brightness percentages for each LED in the group to the given percentages,
     * scaling each according to the given percent power scale if provided.
     *
     * @param colorCombination The percent powers to use for each LED, applied to the corresponding index in the LED group.
     * @param pctPower The scale factor to multiply each value by. Leave undefined or null to default to `1`.
     */
    setColor(colorCombination: number[], pctPower: number): void;
    /**
     * Sets the given property names to the corresponding values on each LED in the group.
     *
     * If the requested property does not exist on the LED object, the property is skipped.
     *
     * @param props A hash containing the key-value pairs of properties to set.
     */
    setProps(props: {
        [propName: string]: any;
    }): void;
    allOn(): void;
    allOff(): void;
}
/**
 * The `lego-port` class provides an interface for working with input and
 * output ports that are compatible with LEGO MINDSTORMS RCX/NXT/EV3, LEGO
 * WeDo and LEGO Power Functions sensors and motors. Supported devices include
 * the LEGO MINDSTORMS EV3 Intelligent Brick, the LEGO WeDo USB hub and
 * various sensor multiplexers from 3rd party manufacturers.
 *
 * Some types of ports may have multiple modes of operation. For example, the
 * input ports on the EV3 brick can communicate with sensors using UART, I2C
 * or analog validate signals - but not all at the same time. Therefore there
 * are multiple modes available to connect to the different types of sensors.
 *
 * In most cases, ports are able to automatically detect what type of sensor
 * or motor is connected. In some cases though, this must be manually specified
 * using the `mode` and `set_device` attributes. The `mode` attribute affects
 * how the port communicates with the connected device. For example the input
 * ports on the EV3 brick can communicate using UART, I2C or analog voltages,
 * but not all at the same time, so the mode must be set to the one that is
 * appropriate for the connected sensor. The `set_device` attribute is used to
 * specify the exact type of sensor that is connected. Note: the mode must be
 * correctly set before setting the sensor type.
 *
 * Ports can be found at `/sys/class/lego-port/port<N>` where `<N>` is
 * incremented each time a new port is registered. Note: The number is not
 * related to the actual port at all - use the `address` attribute to find
 * a specific port.
 */
export declare class LegoPort extends Device {
    protected _deviceIndex: number;
    deviceIndex: number;
    constructor(port: string);
    /**
     * Returns the name of the driver that loaded this device. You can find the
     * complete list of drivers in the [list of port drivers].
     */
    driverName: string;
    /**
     * Returns a list of the available modes of the port.
     */
    modes: string[];
    /**
     * Reading returns the currently selected mode. Writing sets the mode.
     * Generally speaking when the mode changes any sensor or motor devices
     * associated with the port will be removed new ones loaded, however this
     * this will depend on the individual driver implementing this class.
     */
    /**
     * Reading returns the currently selected mode. Writing sets the mode.
     * Generally speaking when the mode changes any sensor or motor devices
     * associated with the port will be removed new ones loaded, however this
     * this will depend on the individual driver implementing this class.
     */
    mode: string;
    /**
     * Returns the name of the port. See individual driver documentation for
     * the name that will be returned.
     */
    address: string;
    /**
     * For modes that support it, writing the name of a driver will cause a new
     * device to be registered for that driver and attached to this port. For
     * example, since NXT/Analog sensors cannot be auto-detected, you must use
     * this attribute to load the correct driver. Returns -EOPNOTSUPP if setting a
     * device is not supported.
     */
    setDevice: string;
    /**
     * In most cases, reading status will return the same value as `mode`. In
     * cases where there is an `auto` mode additional values may be returned,
     * such as `no-device` or `error`. See individual port driver documentation
     * for the full list of possible values.
     */
    status: string;
}
